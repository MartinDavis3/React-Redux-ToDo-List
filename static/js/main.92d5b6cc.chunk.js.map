{"version":3,"sources":["store/todo/actions.ts","store/todo/types.ts","components/TaskInput.tsx","components/TaskButton.tsx","components/TaskListOutput.tsx","App.tsx","serviceWorker.ts","store/todo/reducers.ts","store/index.ts","index.tsx"],"names":["addTaskToList","taskDescription","type","payload","removeTaskFromList","id","TaskInput","props","onUserFieldChange","event","setState","newTaskDescription","currentTarget","value","state","this","Input","onChange","Button","content","onClick","onClickAddTask","Component","connect","taskList","todo","TaskButton","taskId","currentTask","filter","individualTask","Grid","Row","key","onClickRemoveTask","TaskListOutput","length","map","App","centered","React","Boolean","window","location","hostname","match","initialState","nextFreeId","rootReducer","combineReducers","action","newId","newNextFreeId","newTask","task","store","createStore","composeWithDevTools","applyMiddleware","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.92d5b6cc.chunk.js","sourcesContent":["import { ToDoActionType, ADD_TASK_TO_LIST, REMOVE_TASK_FROM_LIST } from './types';\r\n\r\nexport function addTaskToList( taskDescription: string ): ToDoActionType {\r\n  return {\r\n    type: ADD_TASK_TO_LIST,\r\n    payload: taskDescription\r\n  }\r\n}\r\n\r\nexport function removeTaskFromList( id: number): ToDoActionType {\r\n  return {\r\n    type: REMOVE_TASK_FROM_LIST,\r\n    payload: id\r\n  }\r\n}\r\n","export interface Task {\r\n  id: number,\r\n  taskDescription: string\r\n}\r\n\r\nexport interface TaskListState {\r\n  taskList: Task[]\r\n  nextFreeId: number\r\n}\r\n\r\nexport const ADD_TASK_TO_LIST = 'ADD_TASK_TO_LIST';\r\nexport const REMOVE_TASK_FROM_LIST = 'REMOVE_TASK_FROM_LIST';\r\n\r\ninterface AddTaskToList {\r\n  type: typeof ADD_TASK_TO_LIST\r\n  payload: string\r\n}\r\n\r\ninterface RemoveTaskFromList {\r\n  type: typeof REMOVE_TASK_FROM_LIST\r\n  payload: number\r\n}\r\n\r\nexport type ToDoActionType = AddTaskToList | RemoveTaskFromList;\r\n","import * as React from 'react';\r\nimport { Component, Fragment } from 'react';\r\nimport { Input, Button } from 'semantic-ui-react';\r\nimport { connect } from 'react-redux';\r\nimport { RootState } from '../store';\r\nimport { addTaskToList, removeTaskFromList } from '../store/todo/actions';\r\n\r\nexport interface ITaskInputProps {\r\n  addTaskToList: typeof addTaskToList;\r\n}\r\ninterface ITaskInputState {\r\n  newTaskDescription: string;\r\n}\r\n\r\nexport class TaskInput extends Component<ITaskInputProps, ITaskInputState> {\r\n\r\n  constructor(props: ITaskInputProps) {\r\n    super(props);\r\n    this.state = {\r\n      newTaskDescription: ''\r\n    }\r\n  }\r\n\r\n  private onUserFieldChange = (event: React.FormEvent<HTMLInputElement>) => {\r\n    this.setState( { newTaskDescription: event.currentTarget.value} )\r\n  }\r\n\r\n  onClickAddTask(newTaskDescription: string) {\r\n    if (newTaskDescription !== '' ) {\r\n    this.props.addTaskToList(newTaskDescription);\r\n    }\r\n  }\r\n\r\n  public render() {\r\n    const { newTaskDescription } = this.state;\r\n    return (\r\n      <Fragment>\r\n        <h2>New task:</h2><Input onChange={this.onUserFieldChange} />\r\n        <Button content = 'Add' onClick={() => this.onClickAddTask(newTaskDescription)} />              \r\n      </Fragment>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state: RootState) => {\r\n  return {\r\n    taskList: state.todo.taskList,\r\n  };\r\n}\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n  { addTaskToList, removeTaskFromList }\r\n)(TaskInput);","import * as React from 'react';\r\nimport { Component, Fragment } from 'react';\r\nimport { Button, Grid } from 'semantic-ui-react';\r\nimport { Task } from '../store/todo/types';\r\nimport { connect } from 'react-redux';\r\nimport { RootState } from '../store';\r\nimport { addTaskToList, removeTaskFromList } from '../store/todo/actions';\r\n\r\nexport interface ITaskButtonProps {\r\n  taskList: Task[];\r\n  removeTaskFromList: typeof removeTaskFromList;\r\n  taskId: number;\r\n}\r\n\r\nexport class TaskButton extends Component<ITaskButtonProps> {\r\n\r\n  onClickRemoveTask() {\r\n    const { taskId } = this.props;\r\n    this.props.removeTaskFromList(taskId);\r\n  }\r\n\r\n  public render() {\r\n    const { taskList, taskId } = this.props\r\n    const currentTask = taskList.filter(individualTask => (individualTask.id === taskId))[0];\r\n    return (\r\n      <Fragment>\r\n          <Grid.Row>\r\n            <Button key={taskId} content={currentTask.taskDescription} onClick={() => this.onClickRemoveTask()} />        \r\n          </Grid.Row>\r\n      </Fragment>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state: RootState) => {\r\n  return {\r\n    taskList: state.todo.taskList,\r\n  };\r\n}\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n  { addTaskToList, removeTaskFromList }\r\n)(TaskButton);","import * as React from 'react';\r\nimport { Component, Fragment } from 'react';\r\nimport { Task } from '../store/todo/types';\r\nimport TaskButton from './TaskButton';\r\nimport { connect } from 'react-redux';\r\nimport { RootState } from '../store';\r\nimport { addTaskToList, removeTaskFromList } from '../store/todo/actions';\r\n\r\nexport interface ITaskListOutputProps {\r\n  taskList: Task[];\r\n}\r\n\r\nexport class TaskListOutput extends Component<ITaskListOutputProps> {\r\n\r\n  public render() {\r\n    const { taskList } = this.props\r\n    return (\r\n      <Fragment>\r\n        { taskList.length > 0 ? \r\n          taskList.map(individualTask => {\r\n          return <TaskButton key={individualTask.id} taskId={individualTask.id} />})\r\n        :\r\n          <h3>Nothing in your to-do list - you can relax!</h3>\r\n        }\r\n      </Fragment>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state: RootState) => {\r\n  return {\r\n    taskList: state.todo.taskList,\r\n  };\r\n}\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n  { addTaskToList, removeTaskFromList }\r\n)(TaskListOutput);","import * as React from 'react';\r\nimport {Fragment} from 'react';\r\nimport TaskInput from './components/TaskInput';\r\nimport TaskListOutput from './components/TaskListOutput';\r\nimport { connect } from 'react-redux';\r\nimport { RootState } from './store';\r\nimport { addTaskToList, removeTaskFromList } from './store/todo/actions';\r\nimport { Grid } from 'semantic-ui-react';\r\n\r\nexport interface IAppProps {\r\n}\r\n\r\nexport class App extends React.Component<IAppProps> {\r\n\r\n  public render() {\r\n    return (\r\n      <Fragment>\r\n        <Grid centered>\r\n          <Grid.Row>\r\n            <h1>To-Do Application</h1>\r\n          </Grid.Row>\r\n          <Grid.Row>\r\n            <h3>Enter a new task in the input box and press add to put it in the list.</h3>\r\n          </Grid.Row>\r\n          <Grid.Row>\r\n            <h3>To remove a task from the list, simply click on it.</h3>\r\n          </Grid.Row>\r\n          <Grid.Row>\r\n            <TaskInput/>\r\n          </Grid.Row>\r\n          <Grid.Row>\r\n            <h2>To-Do List</h2>\r\n          </Grid.Row>\r\n            <TaskListOutput/>  \r\n        </Grid>\r\n      </Fragment>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state: RootState) => {\r\n  return {\r\n    taskList: state.todo.taskList,\r\n  };\r\n}\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n  { addTaskToList, removeTaskFromList }\r\n)(App);\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(\r\n      process.env.PUBLIC_URL,\r\n      window.location.href\r\n    );\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import { TaskListState, ADD_TASK_TO_LIST, REMOVE_TASK_FROM_LIST, ToDoActionType } from './types';\r\n\r\nconst initialState: TaskListState = {\r\n  taskList: [\r\n  ],\r\n  nextFreeId: 1\r\n};\r\n\r\nexport function toDoReducer( state = initialState, action: ToDoActionType): TaskListState {\r\n  switch (action.type) {\r\n    case ADD_TASK_TO_LIST:\r\n      let newId = state.nextFreeId;\r\n      let newNextFreeId = newId + 1;\r\n      let newTask = { id: newId, taskDescription: action.payload };\r\n      return {\r\n        ...state,\r\n        taskList: [...state.taskList, newTask], nextFreeId: newNextFreeId\r\n      }\r\n    case REMOVE_TASK_FROM_LIST:\r\n      return {\r\n        ...state,\r\n        taskList: state.taskList.filter( task => task.id !== action.payload)\r\n      }\r\n    default:\r\n      return state;\r\n  }\r\n}","import { combineReducers, createStore, applyMiddleware } from \"redux\"\r\nimport { composeWithDevTools } from 'redux-devtools-extension';\r\n\r\nimport { toDoReducer } from \"./todo/reducers\"\r\n\r\nconst rootReducer = combineReducers({\r\n    todo: toDoReducer\r\n})\r\n\r\nexport type RootState = ReturnType<typeof rootReducer>;\r\n\r\nexport default function configureStore() {\r\n    const store = createStore(\r\n        rootReducer,\r\n        composeWithDevTools(\r\n            applyMiddleware()\r\n        )\r\n    );\r\n\r\n    return store;\r\n}","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport { Provider } from 'react-redux';\r\nimport configureStore from './store';\r\n\r\nconst store = configureStore\r\n\r\nReactDOM.render(\r\n  <Provider store={store()}>\r\n    <App />\r\n  </Provider>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}